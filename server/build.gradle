plugins {
    id 'java'
    id 'org.jetbrains.kotlin.jvm'
    id 'kotlinx-serialization'
    id 'application'
    id 'distribution'
}

repositories {
    maven { url 'https://dl.bintray.com/kotlin/kotlin-dev' }
    maven { url 'https://dl.bintray.com/kotlin/kotlin-eap' }
    jcenter()
    maven { url "https://dl.bintray.com/kotlin/kotlin-js-wrappers" }
    maven { url "https://dl.bintray.com/kotlin/kotlinx" }
    mavenCentral()
}

def ktor_version = '1.1.3'
def logback_version = '1.2.3'
def kotlinx_serialization_version = '0.20.0'

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
    implementation "io.ktor:ktor-server-netty:$ktor_version"
    implementation "io.ktor:ktor-client-apache:$ktor_version"
    implementation "io.ktor:ktor-jackson:$ktor_version"
    implementation "io.ktor:ktor-html-builder:$ktor_version"
    implementation "ch.qos.logback:logback-classic:$logback_version"
    implementation "org.jetbrains:kotlin-css-jvm:1.0.0-pre.89-kotlin-1.3.60"
    implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime:$kotlinx_serialization_version"
    implementation "org.jetbrains.exposed:exposed:0.14.1"
    implementation "mysql:mysql-connector-java:5.1.46"
    implementation "ch.qos.logback:logback-classic:1.2.3"

    implementation project(":shared")

    testImplementation "org.jetbrains.kotlin:kotlin-test"
    testImplementation "org.jetbrains.kotlin:kotlin-test-junit"
}

application {
    mainClassName = 'io.ktor.server.netty.EngineMain'
}

processResources {
    from project(":client").tasks.getByName('browserProductionWebpack').destinationDirectory

    //todo: bug?
    dependsOn project(":client").tasks.getByName('browserProductionWebpack')
}


////// Dev server

task devServerResources(type: Copy) {
    destinationDir = new File(project.buildDir, "dev-resources")
    from sourceSets.main.resources
    filter { line -> line.replaceAll('port = 8080', 'port = 8081') }
}

task prepareDevServer {
    dependsOn "compileKotlin"
    dependsOn "devServerResources"
}

task devServer(type: JavaExec) {
    dependsOn "prepareDevServer"

    classpath = project.files(
            configurations.runtimeClasspath,
            new File(project.buildDir, "classes/kotlin/main"),
            new File(project.buildDir, "dev-resources")
    )
    main = 'io.ktor.server.netty.EngineMain'
}

///////////////